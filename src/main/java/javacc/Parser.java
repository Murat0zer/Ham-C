/* Generated By:JavaCC: Do not edit this line. Parser.java */
package javacc;
import interpreter.*;
import interpreter.ast.*;
import interpreter.ast.expression.*;
import interpreter.ast.expression.constant.*;
import interpreter.ast.expression.additive.*;
import interpreter.ast.expression.equality.*;
import interpreter.ast.expression.multiplicative.*;
import interpreter.ast.expression.relational.*;
import interpreter.ast.globalscope.*;
import interpreter.ast.globalscope.struct.*;
import interpreter.ast.statement.iteration.*;
import interpreter.ast.statement.struct.*;
import interpreter.ast.statement.*;
public class Parser implements ParserConstants {
        public static void main(String args[]) throws ParseException {

                try {
                        Parser parser = new Parser(System.in);
                        parser.start();
                }

                catch (Exception e) {
                    System.out.println(e.getMessage());
                        throw new Error("Parsing isleminde hata !");
                }
        }

  static final public java.util.List start() throws ParseException {
    trace_call("start");
    try {
     AbstractGlobalScopeUnit abstractGlobalScopeUnit;
     java.util.List abstractGlobalScopeUnits = new java.util.ArrayList();
      label_1:
      while (true) {
        abstractGlobalScopeUnit = globalScopeUnit();
       abstractGlobalScopeUnits.add(abstractGlobalScopeUnit);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
        case CONST:
        case VOID:
        case INT:
        case BOOL:
        case DOUBLE:
        case STRING:
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
     {if (true) return abstractGlobalScopeUnits;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("start");
    }
  }

  static final public AbstractGlobalScopeUnit globalScopeUnit() throws ParseException {
    trace_call("globalScopeUnit");
    try {
  AbstractGlobalScopeUnit globalScopeUnit;
      if (jj_2_1(3)) {
        globalScopeUnit = globalStructDefinition();
                                                      {if (true) return globalScopeUnit;}
      } else if (jj_2_2(3)) {
        globalScopeUnit = globalStructDeclaration();
                                                      {if (true) return globalScopeUnit;}
      } else if (jj_2_3(3)) {
        globalScopeUnit = globalDeclaration();
                                                {if (true) return globalScopeUnit;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case INT:
        case BOOL:
        case DOUBLE:
        case STRING:
        case ID:
          globalScopeUnit = functionDeclaration();
                                                  {if (true) return globalScopeUnit;}
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("globalScopeUnit");
    }
  }

  static final public AbstractGlobalScopeUnit functionDeclaration() throws ParseException {
    trace_call("functionDeclaration");
    try {
  Token t; java.util.List parameterList; Statement body; String returnType;
      returnType = returnType();
      t = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      parameterList = parameterList();
      jj_consume_token(RPAREN);
      body = compoundStatement();
      {if (true) return new FunctionDeclaration(returnType, t.image, parameterList, body );}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("functionDeclaration");
    }
  }

  static final public String returnType() throws ParseException {
    trace_call("returnType");
    try {
  Token t; String returnType;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
                     {if (true) return t.image;}
        break;
      case INT:
      case BOOL:
      case DOUBLE:
      case STRING:
      case ID:
        returnType = type();
          {if (true) return returnType;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("returnType");
    }
  }

  static final public String type() throws ParseException {
    trace_call("type");
    try {
  Token t;
      if (jj_2_4(2)) {
        t = jj_consume_token(INT);
                        {if (true) return t.image;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE:
          t = jj_consume_token(DOUBLE);
                           {if (true) return t.image;}
          break;
        case BOOL:
          t = jj_consume_token(BOOL);
                         {if (true) return t.image;}
          break;
        case STRING:
          t = jj_consume_token(STRING);
                           {if (true) return t.image;}
          break;
        case ID:
          t = jj_consume_token(ID);
                       {if (true) return t.image;}
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

  static final public java.util.List parameterList() throws ParseException {
    trace_call("parameterList");
    try {
  java.util.List<Variable> parameterList;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
                 {if (true) return null;}
        break;
      default:
        jj_la1[4] = jj_gen;
        parameterList = formalList();
                                                                 {if (true) return parameterList;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parameterList");
    }
  }

  static final public java.util.List formalList() throws ParseException {
    trace_call("formalList");
    try {
  Token t; String type; java.util.List<Variable> parameterList = new java.util.ArrayList();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          jj_consume_token(CONST);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        type = type();
        t = jj_consume_token(ID);
                                                     parameterList.add(new Variable(type, t.image));
      }
                  {if (true) return parameterList;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("formalList");
    }
  }

  static final public AbstractGlobalScopeUnit globalStructDefinition() throws ParseException {
    trace_call("globalStructDefinition");
    try {
  Token id, constToken = null; java.util.Set<VariableDeclarationStatement> declarations;
      jj_consume_token(STRUCT);
      id = jj_consume_token(ID);
      jj_consume_token(LBRACE);
      declarations = structMemberDeclarations();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMI);
      {if (true) return new GlobalStructDefinition(id.image, declarations, constToken);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("globalStructDefinition");
    }
  }

  static final public AbstractGlobalScopeUnit globalStructDeclaration() throws ParseException {
    trace_call("globalStructDeclaration");
    try {
  Token structId = null; Token structInstanceId, constToken = null;
    java.util.Set<VariableDeclarationStatement> definitions;
      structId = jj_consume_token(ID);
      structInstanceId = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      jj_consume_token(LBRACE);
      definitions = structMemberDefinitions();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMI);
      {if (true) return new GlobalStructDeclaration(structId.image, structInstanceId.image, definitions, constToken);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("globalStructDeclaration");
    }
  }

  static final public AbstractGlobalScopeUnit globalStructAssignment() throws ParseException {
    trace_call("globalStructAssignment");
    try {
  Token structInstanceId, constToken = null; java.util.Set<AssignmentStatement> definitions;
      structInstanceId = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      jj_consume_token(LBRACE);
      definitions = structInitializer();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMI);
      {if (true) return new GlobalStructAssignment(structInstanceId.image, definitions, constToken);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("globalStructAssignment");
    }
  }

  static final public java.util.Set structMemberDeclarations() throws ParseException {
    trace_call("structMemberDeclarations");
    try {
    java.util.Set<VariableDeclarationStatement> structMemberDeclarations;
    structMemberDeclarations = new java.util.HashSet();
    String type; Token t; Expression expression = null;
      type = type();
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression = simpleInitializer();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
          structMemberDeclarations.add(new VariableDeclarationStatement(type, t.image, expression));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOL:
        case DOUBLE:
        case STRING:
        case ID:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        type = type();
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          expression = simpleInitializer();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
           structMemberDeclarations.add(new VariableDeclarationStatement(type, t.image, expression));
      }
          {if (true) return structMemberDeclarations;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structMemberDeclarations");
    }
  }

  static final public java.util.Set structMemberDefinitions() throws ParseException {
    trace_call("structMemberDefinitions");
    try {
    java.util.Set<VariableDeclarationStatement> structMemberDeclarations;
    structMemberDeclarations = new java.util.HashSet();
    Token t; Expression expression = null;
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression = simpleInitializer();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
          structMemberDeclarations.add(new VariableDeclarationStatement(null, t.image, expression));
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          expression = simpleInitializer();
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
           structMemberDeclarations.add(new VariableDeclarationStatement(null, t.image, expression));
      }
          {if (true) return structMemberDeclarations;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structMemberDefinitions");
    }
  }

  static final public AbstractGlobalScopeUnit globalDeclaration() throws ParseException {
    trace_call("globalDeclaration");
    try {
  AbstractGlobalScopeUnit globalVariable =  null;
      if (jj_2_5(2)) {
        globalVariable = globalStructAssignment();
           {if (true) return globalVariable;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
        case INT:
        case BOOL:
        case DOUBLE:
        case STRING:
        case ID:
          globalVariable = globalVariableDeclaration();
           {if (true) return globalVariable;}
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("globalDeclaration");
    }
  }

  static final public AbstractGlobalScopeUnit globalVariableDeclaration() throws ParseException {
    trace_call("globalVariableDeclaration");
    try {
  String type; Token id, constToken = null; Expression value = null;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        constToken = jj_consume_token(CONST);
      }
      type = type();
      id = jj_consume_token(ID);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(ASSIGN);
        value = initializer();
      }
      jj_consume_token(SEMI);
      {if (true) return new GlobalVariableDeclaration(type, id.image, value, constToken);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("globalVariableDeclaration");
    }
  }

  static final public Expression initializer() throws ParseException {
    trace_call("initializer");
    try {
  Expression expression;
      expression = simpleInitializer();
                                           {if (true) return new SimpleInitializer(expression);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("initializer");
    }
  }

  static final public java.util.Set structInitializer() throws ParseException {
    trace_call("structInitializer");
    try {
    java.util.Set<AssignmentStatement> structAssignments;
    structAssignments = new java.util.HashSet();
    String type; Token t; Statement statement = null;
      statement = structVariableInitializeStatement();
      structAssignments.add((AssignmentStatement) statement);
      label_7:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(COMMA);
        statement = structVariableInitializeStatement();
          structAssignments.add((AssignmentStatement) statement);
      }
      {if (true) return structAssignments;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structInitializer");
    }
  }

  static final public Expression simpleInitializer() throws ParseException {
    trace_call("simpleInitializer");
    try {
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTCONST:
        t = jj_consume_token(INTCONST);
                         {if (true) return new IntConst(Integer.parseInt(t.image));}
        break;
      case DOUBLECONST:
        t = jj_consume_token(DOUBLECONST);
                            {if (true) return new DoubleConst(Double.parseDouble(t.image));}
        break;
      case TRUE:
        jj_consume_token(TRUE);
                     {if (true) return new BoolExpression(true);}
        break;
      case FALSE:
        jj_consume_token(FALSE);
                      {if (true) return new BoolExpression(false);}
        break;
      case STRCONST:
        t = jj_consume_token(STRCONST);
                     {if (true) return new StrConst(t.image);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("simpleInitializer");
    }
  }

  static final public Statement compoundStatement() throws ParseException {
    trace_call("compoundStatement");
    try {
 Statement s1,s2;
      jj_consume_token(LBRACE);
      s1 = statementList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        s2 = compoundStatement();
                                       s1 = new CompoundStatement(s1, s2);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      {if (true) return s1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("compoundStatement");
    }
  }

  static final public Statement statementList() throws ParseException {
    trace_call("statementList");
    try {
 Statement statement, statementList;
      label_8:
      while (true) {
        statement = statement();
        label_9:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_9;
          }
          statementList = statementList();
              {if (true) return new StatementList(statement, statementList);}
        }
        if (jj_2_8(2)) {
          ;
        } else {
          break label_8;
        }
      }
          {if (true) return statement;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statementList");
    }
  }

  static final public Statement statement() throws ParseException {
    trace_call("statement");
    try {
 Statement stm;
      if (jj_2_9(2)) {
        stm = structDefinitionStatement();
                                          {if (true) return stm;}
      } else if (jj_2_10(2)) {
        stm = structDeclarationStatement();
                                           {if (true) return stm;}
      } else if (jj_2_11(2)) {
        stm = structAssignmentStatement();
                                          {if (true) return stm;}
      } else if (jj_2_12(2)) {
        stm = variableDeclarationStatement();
                                             {if (true) return stm;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LPAREN:
        case SEMI:
        case PLUS:
        case MINUS:
        case NOT:
        case ID:
        case INTCONST:
        case DOUBLECONST:
        case STRCONST:
          stm = expressionOrAssignmentStatement();
                                                    {if (true) return stm;}
          break;
        case IF:
        case SWITCH:
          stm = selectionStatement();
                                       {if (true) return stm;}
          break;
        case LBRACE:
          stm = compoundStatement();
                                      {if (true) return stm;}
          break;
        case FOR:
        case WHILE:
        case DO:
          stm = iterationStatement();
                                       {if (true) return stm;}
          break;
        case RETURN:
          stm = returnStatement();
                                    {if (true) return stm;}
          break;
        case BREAK:
          stm = breakStatement();
                                   {if (true) return stm;}
          break;
        case CONTINUE:
          stm = continueStatement();
                                      {if (true) return stm;}
          break;
        case PRINT:
          stm = printStatement();
                                   {if (true) return stm;}
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  static final public Statement expressionOrAssignmentStatement() throws ParseException {
    trace_call("expressionOrAssignmentStatement");
    try {
  Statement statement;
      if (jj_2_13(2)) {
        statement = assignmentStatement();
                                           {if (true) return statement;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LPAREN:
        case SEMI:
        case PLUS:
        case MINUS:
        case NOT:
        case ID:
        case INTCONST:
        case DOUBLECONST:
        case STRCONST:
          statement = expressionStatement();
                                           {if (true) return statement;}
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expressionOrAssignmentStatement");
    }
  }

  static final public Statement assignmentStatement() throws ParseException {
    trace_call("assignmentStatement");
    try {
  Expression expression; Token t;  Expression pfExp;
      if (jj_2_14(2)) {
        t = jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        expression = expression();
        jj_consume_token(SEMI);
          {if (true) return new AssignmentStatement(expression, t.image);}
      } else if (jj_2_15(3)) {
        pfExp = postfixExpression();
        jj_consume_token(ASSIGN);
        expression = expression();
        jj_consume_token(SEMI);
     {if (true) return new StructVariableAssignmentStatement(pfExp, expression);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("assignmentStatement");
    }
  }

  static final public Statement structAssignmentStatement() throws ParseException {
    trace_call("structAssignmentStatement");
    try {
  Token structInstanceId; String constToken = null; java.util.Set<AssignmentStatement> definitions;
      structInstanceId = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      jj_consume_token(LBRACE);
      definitions = structInitializer();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMI);
      {if (true) return new interpreter.ast.statement.struct.StructAssignmentStatement(structInstanceId.image, definitions, constToken);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structAssignmentStatement");
    }
  }

  static final public Statement structVariableInitializeStatement() throws ParseException {
    trace_call("structVariableInitializeStatement");
    try {
  Expression expression; Token t;  Expression pfExp;
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      expression = expression();
       {if (true) return new AssignmentStatement(expression, t.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structVariableInitializeStatement");
    }
  }

  static final public Statement expressionStatement() throws ParseException {
    trace_call("expressionStatement");
    try {
  Expression expression = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
      case ID:
      case INTCONST:
      case DOUBLECONST:
      case STRCONST:
        expression = expression();
        jj_consume_token(SEMI);
                                           {if (true) return new ExpressionStatement(expression);}
        break;
      case SEMI:
        jj_consume_token(SEMI);
                 {if (true) return new ExpressionStatement(expression);}
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expressionStatement");
    }
  }

  static final public Statement variableDeclarationStatement() throws ParseException {
    trace_call("variableDeclarationStatement");
    try {
  String type,constToken = null; Token t; Expression valueExp = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      type = type();
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        valueExp = expression();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
          {if (true) return new VariableDeclarationStatement(type, t.image, valueExp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variableDeclarationStatement");
    }
  }

  static final public Statement structDeclarationStatement() throws ParseException {
    trace_call("structDeclarationStatement");
    try {
    java.util.Set<VariableDeclarationStatement> structMemberDefinitions;
    structMemberDefinitions = new java.util.HashSet();
    Token structId = null; Token structInstanceId; String constToken = null;
      structId = jj_consume_token(ID);
      structInstanceId = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      jj_consume_token(LBRACE);
      structMemberDefinitions = structMemberDefinitions();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMI);
       {if (true) return new StructDeclarationStatement(structId.image, structInstanceId.image, structMemberDefinitions, constToken );}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structDeclarationStatement");
    }
  }

  static final public Statement structDefinitionStatement() throws ParseException {
    trace_call("structDefinitionStatement");
    try {
 Token id, constToken = null; java.util.Set<VariableDeclarationStatement> declarations;
      jj_consume_token(STRUCT);
      id = jj_consume_token(ID);
      jj_consume_token(LBRACE);
      declarations = structMemberDeclarations();
      jj_consume_token(RBRACE);
      jj_consume_token(SEMI);
          {if (true) return new StructDefinitionStatement(id.image, declarations, constToken);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("structDefinitionStatement");
    }
  }

  static final public Statement selectionStatement() throws ParseException {
    trace_call("selectionStatement");
    try {
  Statement statement;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        statement = ifStatement();
                                    {if (true) return statement;}
        break;
      case SWITCH:
        statement = switchStatement();
                                                                                          {if (true) return statement;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("selectionStatement");
    }
  }

  static final public Statement ifStatement() throws ParseException {
    trace_call("ifStatement");
    try {
  Expression boolExpression; Statement trueBlock; Statement elseBlock = null;
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      boolExpression = expression();
      jj_consume_token(RPAREN);
      trueBlock = statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseBlock = statement();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
          {if (true) return new IfStatement(boolExpression, trueBlock, elseBlock);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ifStatement");
    }
  }

  static final public Statement switchStatement() throws ParseException {
    trace_call("switchStatement");
    try {
  Expression switchExpression; Statement switchBlock;
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      switchExpression = primaryExpression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      switchBlock = switchBlock(switchExpression);
      jj_consume_token(RBRACE);
          {if (true) return new SwitchStatement(switchExpression, switchBlock);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("switchStatement");
    }
  }

  static final public Statement switchBlock(Expression switchExpression) throws ParseException {
    trace_call("switchBlock");
    try {
  Statement labelBlock, switchBlock=null;
      labelBlock = labelBlock(switchExpression);
      label_10:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_10;
        }
        switchBlock = switchBlock(switchExpression);
              {if (true) return new SwitchBlock(labelBlock, switchBlock);}
      }
          {if (true) return new SwitchBlock(labelBlock, switchBlock);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("switchBlock");
    }
  }

  static final public Statement labelBlock(Expression switchExpression) throws ParseException {
    trace_call("labelBlock");
    try {
  Expression constantExpression = null; Statement labelStatement = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        constantExpression = constantExpression();
        jj_consume_token(COLON);
        labelStatement = labelStatement();
            {if (true) return new LabelBlock(constantExpression, labelStatement, switchExpression);}
        break;
      case DEFAULT_:
        jj_consume_token(DEFAULT_);
        jj_consume_token(COLON);
        labelStatement = labelStatement();
          {if (true) return new LabelBlock(constantExpression, labelStatement, switchExpression);}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("labelBlock");
    }
  }

  static final public Statement labelStatement() throws ParseException {
    trace_call("labelStatement");
    try {
  Statement statementList = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case DO:
      case SWITCH:
      case BREAK:
      case CONTINUE:
      case STRUCT:
      case RETURN:
      case CONST:
      case TRUE:
      case FALSE:
      case INT:
      case BOOL:
      case DOUBLE:
      case STRING:
      case LPAREN:
      case LBRACE:
      case SEMI:
      case PLUS:
      case MINUS:
      case NOT:
      case PRINT:
      case ID:
      case INTCONST:
      case DOUBLECONST:
      case STRCONST:
        statementList = statementList();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
          {if (true) return new LabelStatement(statementList);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("labelStatement");
    }
  }

//void constExpression() :
//{}
//{
//	<INTCONST> | <DOUBLECONST> | <TRUE> | <FALSE> | <STRCONST>
//}
  static final public Statement iterationStatement() throws ParseException {
    trace_call("iterationStatement");
    try {
    Token t; Expression boolExpression = null; Statement iterationBody;
    Statement forIndex = null, forIncrement = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        boolExpression = expression();
        jj_consume_token(RPAREN);
        iterationBody = statement();
           {if (true) return new WhileStatement(boolExpression, iterationBody);}
        break;
      case DO:
        jj_consume_token(DO);
        iterationBody = statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        boolExpression = expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMI);
            {if (true) return new DoWhileStatement(boolExpression, iterationBody);}
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        if (jj_2_17(2)) {
          forIndex = statement();
        } else {
          ;
        }
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LPAREN:
        case PLUS:
        case MINUS:
        case NOT:
        case ID:
        case INTCONST:
        case DOUBLECONST:
        case STRCONST:
          boolExpression = expression();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LPAREN:
        case ID:
        case INTCONST:
        case DOUBLECONST:
        case STRCONST:
          forIncrement = assignmentStatement();
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        iterationBody = statement();
        {if (true) return new ForStatement(boolExpression, iterationBody, forIndex, forIncrement );}
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("iterationStatement");
    }
  }

  static final public Statement returnStatement() throws ParseException {
    trace_call("returnStatement");
    try {
  Expression expression = null;
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
      case ID:
      case INTCONST:
      case DOUBLECONST:
      case STRCONST:
        expression = expression();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
          {if (true) return new ReturnStatement(expression);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("returnStatement");
    }
  }

  static final public Statement breakStatement() throws ParseException {
    trace_call("breakStatement");
    try {
      jj_consume_token(BREAK);
      jj_consume_token(SEMI);
          {if (true) return new BreakStatement();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("breakStatement");
    }
  }

  static final public Statement continueStatement() throws ParseException {
    trace_call("continueStatement");
    try {
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMI);
          {if (true) return new ContinueStatement();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("continueStatement");
    }
  }

  static final public Statement printStatement() throws ParseException {
    trace_call("printStatement");
    try {
 Expression e; Token t;
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      e = expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMI);
                                                      {if (true) return new Print(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("printStatement");
    }
  }

  static final public Expression expression() throws ParseException {
    trace_call("expression");
    try {
  Expression e;
      e = logicalOr();
                          {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

  static final public Expression logicalOr() throws ParseException {
    trace_call("logicalOr");
    try {
  Expression e1, e2;
      e1 = logicalAnd();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
        jj_consume_token(OR);
        e2 = logicalAnd();
                                      e1 = new LogicalOR(e1, e2);
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("logicalOr");
    }
  }

  static final public Expression logicalAnd() throws ParseException {
    trace_call("logicalAnd");
    try {
  Expression e1, e2;
      e1 = equalityExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_12;
        }
        jj_consume_token(AND);
        e2 = equalityExpression();
                                              e1 = new LogicalAND(e1, e2);
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("logicalAnd");
    }
  }

  static final public Expression equalityExpression() throws ParseException {
    trace_call("equalityExpression");
    try {
  Expression e1, e2;
      e1 = relationalExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
        case NOTEQUAL:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          e2 = relationalExpression();
                                                  e1 = new EqualExpression(e1, e2);
          break;
        case NOTEQUAL:
          jj_consume_token(NOTEQUAL);
          e2 = relationalExpression();
                                                         e1 = new NotEqualExpression(e1, e2);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("equalityExpression");
    }
  }

  static final public Expression relationalExpression() throws ParseException {
    trace_call("relationalExpression");
    try {
  Expression e1,e2; Token t;
      e1 = additiveExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESSTHAN:
        case GREATERTHAN:
        case LESSEQUAL:
        case GREATEREQUAL:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESSTHAN:
          jj_consume_token(LESSTHAN);
          e2 = additiveExpression();
                                                   e1 = new LessThanExpression(e1, e2);
          break;
        case LESSEQUAL:
          jj_consume_token(LESSEQUAL);
          e2 = additiveExpression();
                                                    e1 = new LessEqualExpression(e1, e2);
          break;
        case GREATERTHAN:
          jj_consume_token(GREATERTHAN);
          e2 = additiveExpression();
                                                      e1 = new GreaterThanExpression(e1, e2);
          break;
        case GREATEREQUAL:
          jj_consume_token(GREATEREQUAL);
          e2 = additiveExpression();
                                                       e1 = new GreaterEqualExpression(e1, e2);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("relationalExpression");
    }
  }

  static final public Expression additiveExpression() throws ParseException {
    trace_call("additiveExpression");
    try {
  Expression e1,e2; Token t;
      e1 = multiplicativeExpression();
      label_15:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          e2 = multiplicativeExpression();
                                                         e1 = new PlusExpression(e1, e2);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          e2 = multiplicativeExpression();
                                                          e1 = new MinusExpression(e1, e2);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("additiveExpression");
    }
  }

  static final public Expression multiplicativeExpression() throws ParseException {
    trace_call("multiplicativeExpression");
    try {
  Expression e1,e2; Token t;
      e1 = exponentialExpression();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          jj_consume_token(TIMES);
          e2 = exponentialExpression();
                                                    e1 = new TimesExpression(e1, e2);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          e2 = exponentialExpression();
                                                     e1 = new DivideExpression(e1, e2);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiplicativeExpression");
    }
  }

  static final public Expression exponentialExpression() throws ParseException {
    trace_call("exponentialExpression");
    try {
  Expression e1,e2;
      e1 = unaryExpression();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POWER:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_17;
        }
        jj_consume_token(POWER);
        e2 = unaryExpression();
                                             {if (true) return new ExponentialExpression(e1, e2);}
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("exponentialExpression");
    }
  }

  static final public Expression unaryExpression() throws ParseException {
    trace_call("unaryExpression");
    try {
  Expression e1; String unaryOp = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case NOT:
        unaryOp = unaryOperator();
        e1 = postfixExpression();
                                                                {if (true) return new UnaryExpression(e1, unaryOp);}
        break;
      case TRUE:
      case FALSE:
      case LPAREN:
      case ID:
      case INTCONST:
      case DOUBLECONST:
      case STRCONST:
        e1 = postfixExpression();
                                      {if (true) return new UnaryExpression(e1, unaryOp);}
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unaryExpression");
    }
  }

  static final public Expression postfixExpression() throws ParseException {
    trace_call("postfixExpression");
    try {
  Expression e1; Expression e2 = null; Token t = null;
      e1 = primaryExpression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
        case DOT:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          jj_consume_token(LBRACK);
          e2 = primaryExpression();
          jj_consume_token(RBRACK);
                                                           {if (true) return new PostfixExpression(e1, e2, t.image);}
          break;
        case DOT:
          jj_consume_token(DOT);
          t = jj_consume_token(ID);
                               {if (true) return new PostfixExpression(e1, e2, t.image);}
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("postfixExpression");
    }
  }

  static final public Expression primaryExpression() throws ParseException {
    trace_call("primaryExpression");
    try {
 Expression e1,e2; Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case INTCONST:
      case DOUBLECONST:
      case STRCONST:
        e1 = constantExpression();
                                       {if (true) return new ConstantExpression(e1);}
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e1 = expression();
        jj_consume_token(RPAREN);
                                                 {if (true) return new PrimaryExpression(e1, t.image);}
        break;
      case ID:
        t = jj_consume_token(ID);
                       {if (true) return new IdExpression(t.image);}
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primaryExpression");
    }
  }

  static final public Expression primaryExpressionPrime() throws ParseException {
    trace_call("primaryExpressionPrime");
    try {
  Expression e1 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        e1 = expressionList();
        jj_consume_token(RPAREN);
                                                    {if (true) return new PrimaryExpressionPrime(e1);}
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
          {if (true) return  e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primaryExpressionPrime");
    }
  }

  static final public Expression expressionList() throws ParseException {
    trace_call("expressionList");
    try {
  Expression e1 = null; Expression e2 = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
      case ID:
      case INTCONST:
      case DOUBLECONST:
      case STRCONST:
        e1 = expression();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_19;
          }
          jj_consume_token(COMMA);
          e2 = expression();
                                                         {if (true) return new ExpressionList(e1, e2);}
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
          {if (true) return new ExpressionList(e1, e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expressionList");
    }
  }

  static final public Expression constantExpression() throws ParseException {
    trace_call("constantExpression");
    try {
 Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTCONST:
        t = jj_consume_token(INTCONST);
                           {if (true) return new IntConst(Integer.parseInt(t.image));}
        break;
      case DOUBLECONST:
        t = jj_consume_token(DOUBLECONST);
                              {if (true) return new DoubleConst(Double.parseDouble(t.image));}
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                       {if (true) return new BoolExpression(true);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                        {if (true) return new BoolExpression(false);}
        break;
      case STRCONST:
        t = jj_consume_token(STRCONST);
                           {if (true) return new StrConst(t.image);}
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("constantExpression");
    }
  }

  static final public String unaryOperator() throws ParseException {
    trace_call("unaryOperator");
    try {
 Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
                     {if (true) return t.image;}
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                                                       {if (true) return t.image;}
        break;
      case NOT:
        t = jj_consume_token(NOT);
                                                                                        {if (true) return t.image;}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unaryOperator");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_3R_33() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(STRCONST)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(DOUBLECONST)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(INTCONST)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_87()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(DEFAULT_)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_100()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(18)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_46()) return true;
    if (jj_scan_token(ID)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(LESSEQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e50000,0x3e00000,0x3e00000,0x3800000,0x200000,0x0,0x40000,0x0,0x3c00000,0x0,0x0,0x0,0x0,0x3c40000,0x40000,0x0,0x180000,0x40000000,0x441acf40,0x4180000,0x4180000,0x40000,0x0,0x840,0x80,0x3000,0x47dfcf40,0x4180000,0x4180000,0x700,0x4180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4180000,0x10000000,0x10000000,0x4180000,0x4000000,0x0,0x4180000,0x180000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000000,0x2000000,0x2000000,0x2000000,0x0,0x2,0x0,0x400,0x2000000,0x400,0x400,0x2,0x400,0x2000000,0x0,0x400,0x1c000000,0x0,0x1e102031,0x1e002031,0x1e002031,0x0,0x400,0x0,0x0,0x0,0x1e102031,0x1e002030,0x1e000000,0x0,0x1e002030,0x1000,0x800,0xc000,0xc000,0xf0000,0xf0000,0x30,0xc0,0xc0,0x200,0x1e002030,0x8,0x8,0x1e000000,0x0,0x2,0x1e002030,0x1c000000,0x2030,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[18];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
