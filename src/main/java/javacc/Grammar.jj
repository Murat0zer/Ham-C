options {
	DEBUG_PARSER = true;
}


PARSER_BEGIN(Parser)
package javacc;
import interpreter.*;
import interpreter.ast.*;
import interpreter.ast.expression.*;
import interpreter.ast.expression.function.*;
import interpreter.ast.expression.constant.*;
import interpreter.ast.expression.arithmetic.additive.*;
import interpreter.ast.expression.arithmetic.multiplicative.*;
import interpreter.ast.expression.logical.equality.*;
import interpreter.ast.expression.logical.relational.*;
import interpreter.ast.expression.logical.*;

import interpreter.ast.globalscope.*;
import interpreter.ast.globalscope.struct.*;

import interpreter.ast.statement.iteration.*;
import interpreter.ast.statement.struct.*;
import interpreter.ast.statement._switch.*;
import interpreter.ast.statement.flow_control.*;
import interpreter.ast.statement.*;
public class Parser {
	public static void main(String args[]) throws ParseException {

		try {
			Parser parser = new Parser(System.in);
			parser.start();
		}

		catch (Exception e) {
		    System.out.println(e.getMessage());
			throw new Error("Parsing isleminde hata !");
		}
	}
}

PARSER_END(Parser)

/* WHITE SPACE */

SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}


TOKEN : {

	< IF : "if" >
|	< ELSE : "else" >
|	< FOR : "for" >
|	< WHILE : "while" >
|	< DO : "do" >
|	< SWITCH : "switch" >
|	< CASE : "case" >
|	< DEFAULT_ : "default" >
|	< BREAK : "break" >
|	< CONTINUE : "continue" >
|	< STRUCT : "struct" >
|	< RETURN : "return" >
|	< CONST : "const" >
|	< TRUE : "true" >
|	< FALSE : "false" >
|	< VOID : "void" >
|	< INT : "int" >
|	< BOOL : "bool" >
|	< DOUBLE : "double" >
|	< STRING : "string" >
|	< LPAREN : "(" >
|	< RPAREN : ")" >
|	< LBRACK : "[" >
|	< RBRACK : "]" >
|	< LBRACE : "{" >
|	< RBRACE : "}" >
|	< SEMI : ";" >
|	< COMMA : "," >
|	< COLON : ":" >
|	< DOT : "." >
|	< PLUS : "+" >
|	< MINUS : "-" >
|	< TIMES : "*" >
|	< DIVIDE : "/" >
|	< MODULO : "%" >
|	< POWER : "^" >
|	< ASSIGN : "=" >
|	< AND : "&&" >
|	< OR : "||" >
|	< NOT : "!" >
|	< EQUAL : "==" >
|	< NOTEQUAL : "!=" >
|	< LESSTHAN : "<" >
|	< GREATERTHAN : ">" >
|	< LESSEQUAL : "<=" >
|	< GREATEREQUAL : ">=" >
|   < PRINT: "print" >
|	< #LETTER : ["a"-"z", "A"-"Z", "_"] >
|	< #DIGIT : ["0"-"9"] >
|	< #SIGN : ["+", "-"] >
|	< #EXPONENT : ["e", "E"] (["+", "-"])? (<DIGIT>)+ >
|	< ID : <LETTER> (<LETTER> | <DIGIT>)* >
|	< INTCONST : (<SIGN>)? (<DIGIT>)+ >
|	< DOUBLECONST : (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
		| "." (<DIGIT>)+ (<EXPONENT>)?
		| (<DIGIT>)+ <EXPONENT> >
|	< STRCONST : "\"" ( (~["\"", "\n", "\r", "\\"]) | "\\" (["n", "t", "b", "r", "f", "\\", "'", "\""]) )* "\"" >

}

java.util.List start() :
{
     AbstractGlobalScopeUnit abstractGlobalScopeUnit;
     java.util.List abstractGlobalScopeUnits = new java.util.ArrayList();
}
{
  (
     abstractGlobalScopeUnit =  globalScopeUnit()
     { abstractGlobalScopeUnits.add(abstractGlobalScopeUnit); }

  )+
   <EOF>
   { return abstractGlobalScopeUnits; }
}

AbstractGlobalScopeUnit globalScopeUnit() :
{ AbstractGlobalScopeUnit globalScopeUnit; }
{

        LOOKAHEAD(3)
        globalScopeUnit = globalStructDefinition()  { return globalScopeUnit; } |
        LOOKAHEAD(3)
        globalScopeUnit = globalStructDeclaration() { return globalScopeUnit; } |
        LOOKAHEAD(3)
        globalScopeUnit = globalDeclaration() { return globalScopeUnit; } |
        globalScopeUnit = functionDefinition() { return globalScopeUnit; }
}

AbstractGlobalScopeUnit functionDefinition() :
{ Token t; java.util.List parameterList; Statement body; String returnType; }
{
	returnType = returnType() t = <ID> <LPAREN> parameterList = parameterList() <RPAREN> body = compoundStatement()

    { return new FunctionDefinition(returnType, t.image, parameterList, body );  }
}

String returnType() :
{ Token t; String returnType; }
{
	t = <VOID> { return t.image; } | returnType = type()

	{ return returnType; }
}

String type() :
{ Token t; }
{
    LOOKAHEAD(2)
	    t = <INT> { return t.image; }
	|   t = <DOUBLE> { return t.image; }
	|   t = <BOOL> { return t.image; }
	|   t = <STRING> { return t.image; }
	|   t = <ID> { return t.image; }
}

java.util.List parameterList() :
{ java.util.List<Variable> parameterList; }
{
	<VOID> { return null; } | parameterList = formalList() { return parameterList; }

}

java.util.List formalList() :
{ Token t; String type; java.util.List<Variable> parameterList = new java.util.ArrayList(); }
{
	( (<CONST>)? type = type() t = <ID> (<COMMA>)? { parameterList.add(new Variable(type, t.image)); })*

		{ return parameterList; }
}


AbstractGlobalScopeUnit globalStructDefinition() :
{ Token id, constToken = null; java.util.Set<VariableDeclarationStatement> declarations;}
{

    <STRUCT> id = <ID>  <LBRACE> declarations = structMemberDeclarations() <RBRACE> <SEMI>
    { return new GlobalStructDefinition(id.image, declarations, constToken); }

}

AbstractGlobalScopeUnit globalStructDeclaration() :
{ Token structId = null; Token structInstanceId, constToken = null;
    java.util.Set<VariableDeclarationStatement> definitions;}
{

    structId = <ID> structInstanceId = <ID> <ASSIGN> <LBRACE>
         definitions = structMemberDefinitions()
     <RBRACE> <SEMI>

    { return new GlobalStructDeclaration(structId.image, structInstanceId.image, definitions, constToken); }

}

AbstractGlobalScopeUnit globalStructAssignment() :
{ Token structInstanceId, constToken = null; java.util.Set<AssignmentStatement> definitions; }
{
     structInstanceId = <ID> <ASSIGN> <LBRACE> definitions = structInitializer() <RBRACE> <SEMI>
    { return new GlobalStructAssignment(structInstanceId.image, definitions, constToken); }
}

java.util.Set structMemberDeclarations() :
{
    java.util.Set<VariableDeclarationStatement> structMemberDeclarations;
    structMemberDeclarations = new java.util.HashSet();
    String type; Token t; Expression expression = null;
}
{
	type = type() t = <ID> (<ASSIGN> expression = simpleInitializer())? <SEMI>
	{ structMemberDeclarations.add(new VariableDeclarationStatement(type, t.image, expression)); }

	(
	 type = type() t = <ID> (<ASSIGN> expression = simpleInitializer())? <SEMI>
	 { structMemberDeclarations.add(new VariableDeclarationStatement(type, t.image, expression)); }
	)*

	{ return structMemberDeclarations; }

}

java.util.Set structMemberDefinitions() :
{
    java.util.Set<VariableDeclarationStatement> structMemberDeclarations;
    structMemberDeclarations = new java.util.HashSet();
    Token t; Expression expression = null;
}
{
	 t = <ID> (<ASSIGN> expression = simpleInitializer())?
	{ structMemberDeclarations.add(new VariableDeclarationStatement(null, t.image, expression)); }

	( <COMMA>
	 t = <ID> (<ASSIGN> expression = simpleInitializer())?
	 { structMemberDeclarations.add(new VariableDeclarationStatement(null, t.image, expression)); }
	)*

	{ return structMemberDeclarations; }

}

AbstractGlobalScopeUnit globalDeclaration() :
{ AbstractGlobalScopeUnit globalVariable =  null; }
{
      LOOKAHEAD(2)
	  globalVariable = globalStructAssignment()
	 { return globalVariable; }

    |
	  globalVariable = globalVariableDeclaration()
	 { return globalVariable; }

}


AbstractGlobalScopeUnit globalVariableDeclaration() :
{ String type; Token id, constToken = null; Expression value = null;}
{
    (constToken = <CONST> )* type = type() id = <ID> ( <ASSIGN> value = initializer() )* <SEMI>
    { return new GlobalVariableDeclaration(type, id.image, value, constToken); }

}

Expression initializer() :
{ Expression expression; }
{
	expression = simpleInitializer() { return new SimpleInitializer(expression); }

}

java.util.Set structInitializer() :
{
    java.util.Set<AssignmentStatement> structAssignments;
    structAssignments = new java.util.HashSet();
    String type; Token t; Statement statement = null;
}
{
	 statement = structVariableInitializeStatement()
    { structAssignments.add((AssignmentStatement) statement); }

    (
        LOOKAHEAD(2)
        <COMMA>
        statement = structVariableInitializeStatement()
        { structAssignments.add((AssignmentStatement) statement); }
    )*
    { return structAssignments; }
}

Expression simpleInitializer() :
{ Token t;}
{
	t = <INTCONST> { return new IntConst(Integer.parseInt(t.image)); }     |
	t = <DOUBLECONST> { return new DoubleConst(Double.parseDouble(t.image)); } |
	    <TRUE> { return new BoolExpression(true); } |
	    <FALSE> { return new interpreter.ast.expression.logical.BoolExpression(false); }|
    t = <STRCONST> { return new StrConst(t.image); }
}


Statement compoundStatement() :
{Statement s1,s2;}
{
	<LBRACE>
	    s1 = statementList()
	    ( s2=compoundStatement() { s1 = new CompoundStatement(s1, s2); } )?
    <RBRACE>

    { return s1; }
}

Statement statementList() :
{Statement statement, statementList; }
{
	(
	    LOOKAHEAD(2)
        statement = statement()
        (
            LOOKAHEAD(2)
            statementList = statementList()
            { return new StatementList(statement, statementList); }
        )*
    )+

	{ return statement; }
}

Statement statement() :
{Statement stm;}
{
      LOOKAHEAD(2)
      stm = structDefinitionStatement() { return stm; }
    |
      LOOKAHEAD(2)
      stm = structDeclarationStatement() { return stm; }
    |
	  LOOKAHEAD(2)
      stm = variableDeclarationStatement() { return stm; }
	| stm = expressionOrAssignmentStatement() { return stm; }
	| stm = selectionStatement() { return stm; }
	| stm = compoundStatement() { return stm; }
	| stm = iterationStatement() { return stm; }
	| stm = returnStatement() { return stm; }
	| stm = breakStatement() { return stm; }
	| stm = continueStatement() { return stm; }
	| stm = printStatement() { return stm; }
}

Statement expressionOrAssignmentStatement() :
{ Statement statement; }
{
       LOOKAHEAD(3)
       statement = expressionStatement() { return statement; }
       |
       statement = assignmentStatement() { return statement; }
}

Statement assignmentStatement() :
{ Statement stm; Expression expression; Token t;  Expression pfExp;
}
{

     LOOKAHEAD(3)
     stm = structAssignmentStatement() { return stm; }
    |
     LOOKAHEAD(3)
	 t = <ID> <ASSIGN> expression = expression() <SEMI>

	 { return new AssignmentStatement(expression, t.image); }

	|
     LOOKAHEAD(3)
 	 pfExp = postfixExpression() <ASSIGN>  expression = expression() <SEMI>
     {return new StructVariableAssignmentStatement(pfExp, expression); }


}

Statement structAssignmentStatement() :
{ Token structInstanceId; String constToken = null; java.util.Set<AssignmentStatement> definitions; }
{
     structInstanceId = <ID> <ASSIGN> <LBRACE> definitions = structInitializer() <RBRACE> <SEMI>
    { return new StructAssignmentStatement(structInstanceId.image, definitions, constToken); }
}

Statement structVariableInitializeStatement() :
{ Expression expression; Token t;  Expression pfExp;
}
{    t = <ID> <ASSIGN> expression = expression()

     { return new AssignmentStatement(expression, t.image); }
}


Statement expressionStatement() :
{ Expression expression = null; }
{
	expression = expression() { return new ExpressionStatement(expression); } |
	<SEMI> { return new ExpressionStatement(expression); }
}


Statement variableDeclarationStatement() :
{
  String type,constToken = null; Token t; Expression valueExp = null;

}
{
	(<CONST>)? type = type() t = <ID> (<ASSIGN> valueExp = expression())? <SEMI>

	{ return new VariableDeclarationStatement(type, t.image, valueExp); }
}

Statement structDeclarationStatement() :
{
    java.util.Set<VariableDeclarationStatement> structMemberDefinitions;
    structMemberDefinitions = new java.util.HashSet();
    Token structId = null; Token structInstanceId; String constToken = null;

}
{
     structId = <ID> structInstanceId = <ID> <ASSIGN> <LBRACE>
         structMemberDefinitions = structMemberDefinitions()
     <RBRACE> <SEMI>

     { return new StructDeclarationStatement(structId.image, structInstanceId.image, structMemberDefinitions, constToken ); }

}

Statement structDefinitionStatement() :
{
 Token id, constToken = null; java.util.Set<VariableDeclarationStatement> declarations;
}
{
    <STRUCT> id = <ID>  <LBRACE> declarations = structMemberDeclarations() <RBRACE> <SEMI>
        { return new StructDefinitionStatement(id.image, declarations, constToken); }
}

Statement selectionStatement() :
{ Statement statement; }
{
	statement = ifStatement() { return statement; } | statement = switchStatement() { return statement; }


}

Statement ifStatement() :
{ Expression boolExpression; Statement trueBlock; Statement elseBlock = null; }
{
	<IF> <LPAREN> boolExpression = expression() <RPAREN> trueBlock = statement() (LOOKAHEAD(1) <ELSE> elseBlock = statement())?

	{ return new IfStatement(boolExpression, trueBlock, elseBlock); }
}


Statement switchStatement() :
{ Expression switchExpression; Statement switchBlock;}
{
	<SWITCH> <LPAREN> switchExpression = primaryExpression() <RPAREN> <LBRACE> switchBlock = switchBlock(switchExpression) <RBRACE>

	{ return new SwitchStatement(switchExpression, switchBlock); }
}

Statement switchBlock(Expression switchExpression) :
{ Statement labelBlock, switchBlock=null; }
{
	labelBlock = labelBlock(switchExpression)
	(
	    LOOKAHEAD(2)
	    switchBlock = switchBlock(switchExpression)
	    { return new SwitchBlock(labelBlock, switchBlock); }
	)*

	{ return new SwitchBlock(labelBlock, switchBlock);}
}

Statement labelBlock(Expression switchExpression) :
{ Expression constantExpression = null; Statement labelStatement = null; }
{
	  <CASE> constantExpression = constantExpression() <COLON> labelStatement = labelStatement()

	  { return new interpreter.ast.statement._switch.LabelBlock(constantExpression, labelStatement, switchExpression); }

	| <DEFAULT_> <COLON> labelStatement = labelStatement()

	{ return new LabelBlock(constantExpression, labelStatement, switchExpression); }
}

Statement labelStatement() :
{ Statement statementList = null; }
{
	(statementList = statementList())?

	{ return new LabelStatement(statementList); }
}

//void constExpression() :
//{}
//{
//	<INTCONST> | <DOUBLECONST> | <TRUE> | <FALSE> | <STRCONST>
//}

Statement iterationStatement() :
{
    Token t; Expression boolExpression = null; Statement iterationBody;
    Statement forIndex = null, forIncrement = null;
}
{
	 <WHILE> <LPAREN> boolExpression = expression() <RPAREN> iterationBody = statement()

	 { return new WhileStatement(boolExpression, iterationBody); }

	| <DO> iterationBody = statement() <WHILE> <LPAREN> boolExpression = expression() <RPAREN> <SEMI>

	  { return new DoWhileStatement(boolExpression, iterationBody); }

	| <FOR> <LPAREN>
                (LOOKAHEAD(2) forIndex = statement())? <SEMI>
                (boolExpression = expression())? <SEMI>
                (forIncrement = assignmentStatement())? <RPAREN>
                iterationBody = statement()
      { return new ForStatement(boolExpression, iterationBody, forIndex, forIncrement ); }
}
Statement returnStatement() :
{ Expression expression = null; }

{
	<RETURN> ( expression = expression())? <SEMI>

	{ return new ReturnStatement(expression); }
}

Statement breakStatement() :
{}
{
	<BREAK> <SEMI>
	{ return new interpreter.ast.statement.flow_control.BreakStatement(); }
}

Statement continueStatement() :
{}
{
	<CONTINUE> <SEMI>
	{ return new ContinueStatement(); }

}

Statement printStatement() :
{Expression e; Token t;}
{
    <PRINT> <LPAREN> e=expression() <RPAREN> <SEMI> { return new Print(e); }

}

Expression expression() :
{ Expression e; Token t; }
{
	e = logicalOr() { return e; }
}

Expression logicalOr() :
{ Expression e1, e2; }
{
	e1 = logicalAnd()
	(
	    <OR>  e2 = logicalAnd() { e1 = new LogicalOR(e1, e2); }
	)*
	{ return e1; }
}

Expression logicalAnd() :
{ Expression e1, e2; }
{
	e1 = equalityExpression()
	(
	    <AND> e2 = equalityExpression() { e1 = new interpreter.ast.expression.logical.LogicalAND(e1, e2); }
	)*

	{ return e1; }
}

Expression equalityExpression() :
{ Expression e1, e2; }
{
	e1 = relationalExpression()
	(
	    (
            <EQUAL> e2 = relationalExpression() { e1 = new EqualExpression(e1, e2); } |
	        <NOTEQUAL> e2 = relationalExpression() { e1 = new NotEqualExpression(e1, e2); }
	    )
	)*

	{ return e1; }
}

Expression relationalExpression() :
{ Expression e1,e2; Token t; }
{
	e1 = additiveExpression()
	(
	    (
            <LESSTHAN> e2 = additiveExpression() { e1 = new LessThanExpression(e1, e2); }           |
            <LESSEQUAL> e2 = additiveExpression() { e1 = new LessEqualExpression(e1, e2); }         |
            <GREATERTHAN> e2 = additiveExpression() { e1 = new GreaterThanExpression(e1, e2); }     |
            <GREATEREQUAL> e2 = additiveExpression() { e1 = new GreaterEqualExpression(e1, e2); }
        )
	)*
	{ return e1; }
}

Expression additiveExpression() :
{ Expression e1,e2; Token t; }
{
	e1 = multiplicativeExpression()
	(
        LOOKAHEAD(2)
	    (
	        <PLUS> e2 = multiplicativeExpression() { e1 = new PlusExpression(e1, e2); } |
	        <MINUS> e2 = multiplicativeExpression() { e1 = new interpreter.ast.expression.arithmetic.additive.MinusExpression(e1, e2); }
	    )
	)*
	{ return e1; }
}

Expression multiplicativeExpression() :
{ Expression e1,e2; Token t; }
{
	e1 = exponentialExpression()
	(
	    (
            <TIMES> e2 = exponentialExpression()  { e1 = new TimesExpression(e1, e2); } |
            <DIVIDE> e2 = exponentialExpression()  { e1 = new DivideExpression(e1, e2); }
	    )
	)*
	{ return e1; }
}

Expression exponentialExpression() :
{ Expression e1,e2;}
{
	e1 = unaryExpression()
	(
	    <POWER> e2 = unaryExpression() { return new ExponentialExpression(e1, e2); }
	)*
	{ return e1; }
}

Expression unaryExpression() :
{ Expression e1; String unaryOp = null; }
{
	   unaryOp = unaryOperator() e1 = postfixExpression() { return new UnaryExpression(e1, unaryOp); }
	 | e1 = postfixExpression() { return new UnaryExpression(e1, unaryOp); }
}

Expression postfixExpression() :
{ Expression e1; Expression e2 = null; Token t = null;}
{
	e1 = primaryExpression()
	(
	      <LBRACK> e2 = primaryExpression() <RBRACK> { return new PostfixExpression(e1, e2, t.image); }
	    | <DOT> t = <ID> { return new PostfixExpression(e1, e2, t.image); }
	)*
	{ return e1; }
}

Expression primaryExpression() :
{Expression e1,e2; Token t = null; Expression primaryExpressionPrime = null;}
{
	   e1 = constantExpression() { return new ConstantExpression(e1); }
	 |
	  <LPAREN> e1 = expression() <RPAREN> { return new PrimaryExpression(e1, t.image); }

	 |
      LOOKAHEAD(3)
      t = <ID> primaryExpressionPrime = primaryExpressionPrime()
       {
         if(primaryExpressionPrime == null)
             return new IdExpression(t.image);
         else
            return new FunctionCall(t.image, primaryExpressionPrime);
        }
}

Expression primaryExpressionPrime() :
{ Expression e1 = null; }
{
	(LOOKAHEAD(2) <LPAREN> e1 =  expressionList() <RPAREN> { return new PrimaryExpressionPrime(e1); })?
	{ return  e1; }
}

Expression expressionList() :
{ Expression e1 = null; Expression e2 = null; }
{
	( e1 = expression() (<COMMA> e2 = expression() { return new ExpressionList(e1, e2); } )* )?

	{ return new ExpressionList(e1, e2); }
}

Expression constantExpression() :
{Token t;}
{
	  t = <INTCONST> { return new IntConst(Integer.parseInt(t.image)); }
	| t = <DOUBLECONST> { return new DoubleConst(Double.parseDouble(t.image)); }
	| t = <TRUE> { return new BoolExpression(true); }
	| t = <FALSE> { return new BoolExpression(false); }
	| t = <STRCONST> { return new StrConst(t.image); }
}

String unaryOperator() :
{Token t;}
{
	t = <PLUS> { return t.image; } | t=  <MINUS> { return t.image; } | t =  <NOT> { return t.image; }


}
