/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int ELSE = 7;
  /** RegularExpression Id. */
  int FOR = 8;
  /** RegularExpression Id. */
  int WHILE = 9;
  /** RegularExpression Id. */
  int DO = 10;
  /** RegularExpression Id. */
  int SWITCH = 11;
  /** RegularExpression Id. */
  int CASE = 12;
  /** RegularExpression Id. */
  int DEFAULT_ = 13;
  /** RegularExpression Id. */
  int BREAK = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int STRUCT = 16;
  /** RegularExpression Id. */
  int RETURN = 17;
  /** RegularExpression Id. */
  int CONST = 18;
  /** RegularExpression Id. */
  int TRUE = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int VOID = 21;
  /** RegularExpression Id. */
  int INT = 22;
  /** RegularExpression Id. */
  int BOOL = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int STRING = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LBRACK = 28;
  /** RegularExpression Id. */
  int RBRACK = 29;
  /** RegularExpression Id. */
  int LBRACE = 30;
  /** RegularExpression Id. */
  int RBRACE = 31;
  /** RegularExpression Id. */
  int SEMI = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int DOT = 35;
  /** RegularExpression Id. */
  int PLUS = 36;
  /** RegularExpression Id. */
  int MINUS = 37;
  /** RegularExpression Id. */
  int TIMES = 38;
  /** RegularExpression Id. */
  int DIVIDE = 39;
  /** RegularExpression Id. */
  int MODULO = 40;
  /** RegularExpression Id. */
  int POWER = 41;
  /** RegularExpression Id. */
  int ASSIGN = 42;
  /** RegularExpression Id. */
  int AND = 43;
  /** RegularExpression Id. */
  int OR = 44;
  /** RegularExpression Id. */
  int NOT = 45;
  /** RegularExpression Id. */
  int EQUAL = 46;
  /** RegularExpression Id. */
  int NOTEQUAL = 47;
  /** RegularExpression Id. */
  int LESSTHAN = 48;
  /** RegularExpression Id. */
  int GREATERTHAN = 49;
  /** RegularExpression Id. */
  int LESSEQUAL = 50;
  /** RegularExpression Id. */
  int GREATEREQUAL = 51;
  /** RegularExpression Id. */
  int PRINT = 52;
  /** RegularExpression Id. */
  int LETTER = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;
  /** RegularExpression Id. */
  int SIGN = 55;
  /** RegularExpression Id. */
  int EXPONENT = 56;
  /** RegularExpression Id. */
  int ID = 57;
  /** RegularExpression Id. */
  int INTCONST = 58;
  /** RegularExpression Id. */
  int DOUBLECONST = 59;
  /** RegularExpression Id. */
  int STRCONST = 60;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"continue\"",
    "\"struct\"",
    "\"return\"",
    "\"const\"",
    "\"true\"",
    "\"false\"",
    "\"void\"",
    "\"int\"",
    "\"bool\"",
    "\"double\"",
    "\"string\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"print\"",
    "<LETTER>",
    "<DIGIT>",
    "<SIGN>",
    "<EXPONENT>",
    "<ID>",
    "<INTCONST>",
    "<DOUBLECONST>",
    "<STRCONST>",
  };

}
